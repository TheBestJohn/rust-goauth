initSidebarItems({"enum":[["Algorithm",""]],"macro":[["assert","Ensure that a boolean expression is `true` at runtime."],["assert_eq","Asserts that two expressions are equal to each other (using [`PartialEq`])."],["assert_ne","Asserts that two expressions are not equal to each other (using [`PartialEq`])."],["debug_assert","Ensure that a boolean expression is `true` at runtime."],["debug_assert_eq","Asserts that two expressions are equal to each other."],["debug_assert_ne","Asserts that two expressions are not equal to each other."],["eprint","Macro for printing to the standard error."],["eprintln","Macro for printing to the standard error, with a newline."],["format","Creates a `String` using interpolation of runtime expressions."],["panic","The entry point for panic of Rust threads."],["print","Macro for printing to the standard output."],["println","Macro for printing to the standard output, with a newline."],["select","A macro to select an event from a number of receivers."],["thread_local","Declare a new thread local storage key of type [`std::thread::LocalKey`]."],["try","Helper macro for reducing boilerplate code for matching `Result` together with converting downstream errors."],["unimplemented","A standardized placeholder for marking unfinished code."],["unreachable","A utility macro for indicating unreachable code."],["vec","Creates a [`Vec`] containing the arguments."],["write","Write formatted data into a buffer."],["writeln","Write formatted data into a buffer, with a newline appended."]],"mod":[["error",""]],"struct":[["Jwt",""],["JwtHeader",""],["RSAKey",""]]});